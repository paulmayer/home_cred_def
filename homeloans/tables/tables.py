from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, create_engine, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship
from sqlalchemy.types import *

Base = declarative_base()
_engine = None
_Session = None


class Application(Base):
    __tablename__ = "Application"
    sk_id_curr = Column(Integer, primary_key=True)
    target = Column(Integer)
    name_contract_type = Column(String(15))
    code_gender = Column(String(3))
    flag_own_car = Column(Boolean)
    flag_own_realty = Column(Boolean)
    cnt_children = Column(Integer)
    amt_income_total = Column(Float(precision=10, asdecimal=True))
    amt_credit = Column(Float(precision=8, asdecimal=True))
    amt_annuity = Column(Float(precision=7, asdecimal=True))
    amt_goods_price = Column(Float(precision=8, asdecimal=True))
    name_type_suite = Column(String(15))
    name_income_type = Column(String(20))
    name_education_type = Column(String(29))
    name_family_status = Column(String(20))
    name_housing_type = Column(String(19))
    region_population_relative = Column(Float(precision=21, asdecimal=True))
    days_birth = Column(Integer)
    days_employed = Column(Integer)
    days_registration = Column(Integer)
    days_id_publish = Column(Integer)
    own_car_age = Column(Integer)
    flag_mobil = Column(Boolean)
    flag_emp_phone = Column(Boolean)
    flag_work_phone = Column(Boolean)
    flag_cont_mobile = Column(Boolean)
    flag_phone = Column(Boolean)
    flag_email = Column(Boolean)
    occupation_type = Column(String(21))
    cnt_fam_members = Column(Integer)
    region_rating_client = Column(Integer)
    region_rating_client_w_city = Column(Integer)
    weekday_appr_process_start = Column(String(9))
    hour_appr_process_start = Column(Integer)
    reg_region_not_live_region = Column(Integer)
    reg_region_not_work_region = Column(Integer)
    live_region_not_work_region = Column(Integer)
    reg_city_not_live_city = Column(Integer)
    reg_city_not_work_city = Column(Integer)
    live_city_not_work_city = Column(Integer)
    organization_type = Column(String(22))
    ext_source_1 = Column(Float(precision=19, asdecimal=True))
    ext_source_2 = Column(Float(precision=23, asdecimal=True))
    ext_source_3 = Column(Float(precision=20, asdecimal=True))
    apartments_avg = Column(Float(precision=19, asdecimal=True))
    basementarea_avg = Column(Float(precision=19, asdecimal=True))
    years_beginexpluatation_avg = Column(Float(precision=5, asdecimal=True))
    years_build_avg = Column(Float(precision=18, asdecimal=True))
    commonarea_avg = Column(Float(precision=19, asdecimal=True))
    elevators_avg = Column(Float(precision=19, asdecimal=True))
    entrances_avg = Column(Float(precision=18, asdecimal=True))
    floorsmax_avg = Column(Float(precision=5, asdecimal=True))
    floorsmin_avg = Column(Float(precision=5, asdecimal=True))
    landarea_avg = Column(Float(precision=19, asdecimal=True))
    livingapartments_avg = Column(Float(precision=19, asdecimal=True))
    livingarea_avg = Column(Float(precision=19, asdecimal=True))
    nonlivingapartments_avg = Column(Float(precision=19, asdecimal=True))
    nonlivingarea_avg = Column(Float(precision=19, asdecimal=True))
    apartments_mode = Column(Float(precision=18, asdecimal=True))
    basementarea_mode = Column(Float(precision=19, asdecimal=True))
    years_beginexpluatation_mode = Column(Float(precision=5, asdecimal=True))
    years_build_mode = Column(Float(precision=18, asdecimal=True))
    commonarea_mode = Column(Float(precision=19, asdecimal=True))
    elevators_mode = Column(Float(precision=5, asdecimal=True))
    entrances_mode = Column(Float(precision=5, asdecimal=True))
    floorsmax_mode = Column(Float(precision=5, asdecimal=True))
    floorsmin_mode = Column(Float(precision=5, asdecimal=True))
    landarea_mode = Column(Float(precision=19, asdecimal=True))
    livingapartments_mode = Column(Float(precision=18, asdecimal=True))
    livingarea_mode = Column(Float(precision=19, asdecimal=True))
    nonlivingapartments_mode = Column(Float(precision=18, asdecimal=True))
    nonlivingarea_mode = Column(Float(precision=19, asdecimal=True))
    apartments_medi = Column(Float(precision=19, asdecimal=True))
    basementarea_medi = Column(Float(precision=19, asdecimal=True))
    years_beginexpluatation_medi = Column(Float(precision=5, asdecimal=True))
    years_build_medi = Column(Float(precision=19, asdecimal=True))
    commonarea_medi = Column(Float(precision=19, asdecimal=True))
    elevators_medi = Column(Float(precision=3, asdecimal=True))
    entrances_medi = Column(Float(precision=5, asdecimal=True))
    floorsmax_medi = Column(Float(precision=5, asdecimal=True))
    floorsmin_medi = Column(Float(precision=5, asdecimal=True))
    landarea_medi = Column(Float(precision=19, asdecimal=True))
    livingapartments_medi = Column(Float(precision=19, asdecimal=True))
    livingarea_medi = Column(Float(precision=19, asdecimal=True))
    nonlivingapartments_medi = Column(Float(precision=17, asdecimal=True))
    nonlivingarea_medi = Column(Float(precision=19, asdecimal=True))
    fondkapremont_mode = Column(String(21))
    housetype_mode = Column(String(16))
    totalarea_mode = Column(Float(precision=19, asdecimal=True))
    wallsmaterial_mode = Column(String(12))
    emergencystate_mode = Column(String(3))
    obs_30_cnt_social_circle = Column(Integer)
    def_30_cnt_social_circle = Column(Integer)
    obs_60_cnt_social_circle = Column(Integer)
    def_60_cnt_social_circle = Column(Integer)
    days_last_phone_change = Column(Integer)
    flag_document_2 = Column(Boolean)
    flag_document_3 = Column(Boolean)
    flag_document_4 = Column(Boolean)
    flag_document_5 = Column(Boolean)
    flag_document_6 = Column(Boolean)
    flag_document_7 = Column(Boolean)
    flag_document_8 = Column(Boolean)
    flag_document_9 = Column(Boolean)
    flag_document_10 = Column(Boolean)
    flag_document_11 = Column(Boolean)
    flag_document_12 = Column(Boolean)
    flag_document_13 = Column(Boolean)
    flag_document_14 = Column(Boolean)
    flag_document_15 = Column(Boolean)
    flag_document_16 = Column(Boolean)
    flag_document_17 = Column(Boolean)
    flag_document_18 = Column(Boolean)
    flag_document_19 = Column(Boolean)
    flag_document_20 = Column(Boolean)
    flag_document_21 = Column(Boolean)
    amt_req_credit_bureau_hour = Column(Integer)
    amt_req_credit_bureau_day = Column(Integer)
    amt_req_credit_bureau_week = Column(Integer)
    amt_req_credit_bureau_mon = Column(Integer)
    amt_req_credit_bureau_qrt = Column(Integer)
    amt_req_credit_bureau_year = Column(Integer)

    bureau_entries = relationship("Bureau", back_populates="curr_application")
    prev_applications = relationship("PreviousApplication", back_populates="curr_application")
    cash_balances = relationship("CashBalance", back_populates="curr_application")
    instalment_payments = relationship("InstalmentPayments", back_populates="curr_application")
    credit_card_balances = relationship("CreditCardBalance", back_populates="curr_application")


class Bureau(Base):
    __tablename__ = "Bureau"
    sk_id_curr = Column(Integer, ForeignKey("Application.sk_id_curr"))
    sk_id_bureau = Column(Integer, primary_key=True)
    credit_active = Column(String(8))
    credit_currency = Column(String(10))
    days_credit = Column(Integer)
    credit_day_overdue = Column(Integer)
    days_credit_enddate = Column(Integer)
    days_enddate_fact = Column(Integer)
    amt_credit_max_overdue = Column(Float(precision=10, asdecimal=True))
    cnt_credit_prolong = Column(Integer)
    amt_credit_sum = Column(Float(precision=11, asdecimal=True))
    amt_credit_sum_debt = Column(Float(precision=17, asdecimal=True))
    amt_credit_sum_limit = Column(Float(precision=17, asdecimal=True))
    amt_credit_sum_overdue = Column(Float(precision=10, asdecimal=True))
    credit_type = Column(String(44))
    days_credit_update = Column(Integer)
    amt_annuity = Column(Float(precision=17, asdecimal=True))

    curr_application = relationship("Application", back_populates="bureau_entries", uselist=False)
    balances = relationship("BureauBalance", back_populates="bureau_entry")


class BureauBalance(Base):
    __tablename__ = "BureauBalance"
    sk_id_bureau = Column(Integer, ForeignKey("Bureau.sk_id_bureau"), primary_key=True)
    months_balance = Column(Integer, primary_key=True)
    status = Column(String(1))

    bureau_entry = relationship("Bureau", back_populates="balances", uselist=False)


class CashBalance(Base):
    __tablename__ = "CashBalance"
    sk_id_prev = Column(Integer, ForeignKey("PreviousApplication.sk_id_prev"), primary_key=True)
    sk_id_curr = Column(Integer, ForeignKey("Application.sk_id_curr"), primary_key=True)
    months_balance = Column(Integer, primary_key=True)
    cnt_instalment = Column(Integer)
    cnt_instalment_future = Column(Integer)
    name_contract_status = Column(String)
    sk_dpd = Column(Integer)
    sk_dpd_def = Column(Integer)

    curr_application = relationship("Application", back_populates="cash_balances", uselist=False)
    prev_application = relationship("PreviousApplication", back_populates="cash_balances", uselist=False)


class CreditCardBalance(Base):
    __tablename__ = "CreditCardBalance"
    sk_id_prev = Column(Integer, ForeignKey("PreviousApplication.sk_id_prev"), primary_key=True)
    sk_id_curr = Column(Integer, ForeignKey("Application.sk_id_curr"), primary_key=True)
    months_balance = Column(Integer, primary_key=True)
    amt_balance = Column(Float(precision=10, asdecimal=True))
    amt_credit_limit_actual = Column(Integer)
    amt_drawings_atm_current = Column(Float(precision=9, asdecimal=True))
    amt_drawings_current = Column(Float(precision=10, asdecimal=True))
    amt_drawings_other_current = Column(Float(precision=9, asdecimal=True))
    amt_drawings_pos_current = Column(Float(precision=10, asdecimal=True))
    amt_inst_min_regularity = Column(Float(precision=9, asdecimal=True))
    amt_payment_current = Column(Float(precision=10, asdecimal=True))
    amt_payment_total_current = Column(Float(precision=10, asdecimal=True))
    amt_receivable_principal = Column(Float(precision=10, asdecimal=True))
    amt_recivable = Column(Float(precision=10, asdecimal=True))
    amt_total_receivable = Column(Float(precision=10, asdecimal=True))
    cnt_drawings_atm_current = Column(Integer)
    cnt_drawings_current = Column(Integer)
    cnt_drawings_other_current = Column(Integer)
    cnt_drawings_pos_current = Column(Integer)
    cnt_instalment_mature_cum = Column(Integer)
    name_contract_status = Column(String(13))
    sk_dpd = Column(Integer)
    sk_dpd_def = Column(Integer)

    curr_application = relationship("Application", back_populates="credit_card_balances", uselist=False)
    prev_application = relationship("PreviousApplication", back_populates="credit_card_balances", uselist=False)


class InstalmentPayments(Base):
    __tablename__ = "InstalmentPayments"
    payment_id = Column(Integer, primary_key=True)
    sk_id_prev = Column(Integer, ForeignKey("PreviousApplication.sk_id_prev"))
    sk_id_curr = Column(Integer, ForeignKey("Application.sk_id_curr"))
    num_instalment_version = Column(Integer)
    num_instalment_number = Column(Integer)
    days_instalment = Column(Integer)
    days_entry_payment = Column(Integer)
    amt_instalment = Column(Float(precision=10, asdecimal=True))
    amt_payment = Column(Float(precision=10, asdecimal=True))

    curr_application = relationship("Application", back_populates="instalment_payments", uselist=False)
    prev_application = relationship("PreviousApplication", back_populates="instalment_payments", uselist=False)


class PreviousApplication(Base):
    __tablename__ = "PreviousApplication"
    sk_id_prev = Column(Integer, primary_key=True)
    sk_id_curr = Column(Integer, ForeignKey("Application.sk_id_curr"), primary_key=True)
    name_contract_type = Column(String(15))
    amt_annuity = Column(Float(precision=9, asdecimal=True))
    amt_application = Column(Float(precision=10, asdecimal=True))
    amt_credit = Column(Float(precision=10, asdecimal=True))
    amt_down_payment = Column(Float(precision=9, asdecimal=True))
    amt_goods_price = Column(Float(precision=10, asdecimal=True))
    weekday_appr_process_start = Column(String(9))
    hour_appr_process_start = Column(Integer)
    flag_last_appl_per_contract = Column(String(1))
    nflag_last_appl_in_day = Column(Integer)
    rate_down_payment = Column(Float(precision=23, asdecimal=True))
    rate_interest_primary = Column(Float(precision=19, asdecimal=True))
    rate_interest_privileged = Column(Float(precision=17, asdecimal=True))
    name_cash_loan_purpose = Column(String(32))
    name_contract_status = Column(String(12))
    days_decision = Column(Integer)
    name_payment_type = Column(String(41))
    code_reject_reason = Column(String(6))
    name_type_suite = Column(String(15))
    name_client_type = Column(String(9))
    name_goods_category = Column(String(24))
    name_portfolio = Column(String(5))
    name_product_type = Column(String(7))
    channel_type = Column(String(26))
    sellerplace_area = Column(Integer)
    name_seller_industry = Column(String(20))
    cnt_payment = Column(Integer)
    name_yield_group = Column(String(10))
    product_combination = Column(String(30))
    days_first_drawing = Column(Integer)
    days_first_due = Column(Integer)
    days_last_due_1st_version = Column(Integer)
    days_last_due = Column(Integer)
    days_termination = Column(Integer)
    nflag_insured_on_approval = Column(Integer)

    curr_application = relationship("Application", back_populates="prev_applications", uselist=False)
    cash_balances = relationship("CashBalance", back_populates="prev_application")
    instalment_payments = relationship("InstalmentPayments", back_populates="prev_application")
    credit_card_balances = relationship("CreditCardBalance", back_populates="prev_application")


def initialise_database(database_fn, drop=True, echo=False):
    global _engine, _Session
    _engine = create_engine("sqlite:///%s" % database_fn, echo=echo)
    if drop:
        Base.metadata.drop_all(_engine)
    Base.metadata.create_all(_engine)
    _Session = sessionmaker(bind=_engine)


def get_session():
    if not _Session:
        return None
    else:
        return _Session()
